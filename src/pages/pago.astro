---
export const prerender = false;
import Layout from "@Layouts/layout.astro";
import { userinfo } from "@Lib/auth";
import { getClientData, saveClientData } from "@Lib/clientes";
const data = Astro.locals;

const token = data.token?.value;
const user = await userinfo(token);
const client = await getClientData(user.Idusuario, token);

const cliente = client[0];
---

<Layout title="Pago">
  <header class="bg-indigo-600 shadow-md py-4 flex-col">
    <div class="container mx-auto px-6 flex justify-between items-center">
      <a href="/" class="text-white font-bold text-lg hover:underline">
        &larr; Volver a la tienda
      </a>
      <h1 class="text-2xl font-bold text-white">Pago</h1>
    </div>
  </header>
  
  <main class="mx-auto px-6 py-8 flex flex-col lg:flex-row gap-8 bg-gray-100 items-start">
    <!-- Información de Pago -->
    <div class="w-full lg:w-1/2 bg-white p-6 shadow-lg rounded-lg">
      <h2 class="text-xl font-bold text-gray-800 mb-4">Información de Pago</h2>
      <form id="payment-form">
        <div class="mb-4">
          <input type="hidden" name="idusuario" value={user.Idusuario || 0} />
          <input type="hidden" name="idcliente" value={cliente?.Idcliente || 0} />
          <label for="nombre" class="block text-gray-700 font-medium">Nombre Completo</label>
          <input
            type="text"
            id="nombre"
            name="nombre"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="Nombre completo"
            value={user.nombre || cliente.nombre}
            required
          />
        </div>
        <div class="mb-4">
          <label for="direccion" class="block text-gray-700 font-medium">Dirección</label>
          <input
            type="text"
            id="direccion"
            name="direccion"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="Dirección"
            value={cliente?.direccion || ""}
            required
          />
        </div>
        <div class="mb-4">
          <label for="telefono" class="block text-gray-700 font-medium">Teléfono</label>
          <input
            type="text"
            id="telefono"
            name="telefono"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="Teléfono"
            value={cliente?.telefono || ""}
            required
          />
        </div>
        <div class="mb-4">
          <label for="dui" class="block text-gray-700 font-medium">DUI</label>
          <input
            type="text"
            id="dui"
            name="dui"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="DUI (Opcional)"
            value={cliente?.dui || ""}
          />
        </div>
        <div class="mb-4">
          <label for="nit" class="block text-gray-700 font-medium">NIT</label>
          <input
            type="text"
            id="nit"
            name="nit"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="NIT (Opcional)"
            value={cliente?.nit || ""}
          />
        </div>
        <div class="mb-4">
          <label for="nrc" class="block text-gray-700 font-medium">NRC</label>
          <input
            type="text"
            id="nrc"
            name="nrc"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="NRC (Opcional)"
            value={cliente?.nrc || ""}
          />
        </div>
        <div class="mb-4">
          <label for="tipo_cliente" class="block text-gray-700 font-medium">Tipo de Cliente</label>
          <select
            id="tipo_cliente"
            name="tipo_cliente"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            required
          >
            <option value="1" selected>Persona</option>
            <option value="2">Empresa</option>
          </select>
        </div>
        <div class="mb-4">
          <label for="giro" class="block text-gray-700 font-medium">Giro</label>
          <input
            type="text"
            id="giro"
            name="giro"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            placeholder="Giro (Opcional)"
            value={cliente?.giro || ""}
          />
        </div>
        <div class="mb-4">
          <label for="payment-method" class="block text-gray-700 font-medium">Método de Pago</label>
          <select
            id="payment-method"
            name="payment-method"
            class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
            required
          >
            <option value="card">Tarjeta de Crédito/Débito</option>
            <option value="cash">Efectivo</option>
          </select>
        </div>
  
        <!-- Información de la Tarjeta -->
        <div id="card-info">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Información de la Tarjeta</h3>
          <div class="mb-4">
            <label for="cardholder" class="block text-gray-700 font-medium">Titular de la Tarjeta</label>
            <input
              type="text"
              id="cardholder"
              name="cardholder"
              class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
              placeholder="Nombre como aparece en la tarjeta"
            />
          </div>
          <div class="mb-4">
            <label for="card-number" class="block text-gray-700 font-medium">Número de Tarjeta</label>
            <input
              type="text"
              id="card-number"
              name="card-number"
              maxlength="19"
              class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
              placeholder="1234-5678-9012-3456"
            />
          </div>
          <div class="grid grid-cols-2 gap-4 mb-4">
            <div>
              <label for="expiry" class="block text-gray-700 font-medium">Fecha de Expiración</label>
              <input
                type="month"
                id="expiry"
                name="expiry"
                class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
              />
            </div>
            <div>
              <label for="cvv" class="block text-gray-700 font-medium">CVV</label>
              <input
                type="text"
                id="cvv"
                name="cvv"
                maxlength="3"
                class="block w-full mt-2 p-3 border rounded-lg focus:outline-none focus:ring focus:ring-indigo-300"
                placeholder="123"
              />
            </div>
          </div>
        </div>
  
        <!-- Información de Efectivo -->
        <div id="cash-info" class="hidden mb-4">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Información de Efectivo</h3>
          <p class="text-gray-700 mb-4">El pago en efectivo se realizará al momento de la entrega.</p>
        </div>
  
        <button
          type="submit"
          class="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 font-semibold"
        >
          <i class="fa-solid fa-credit-card"></i> Realizar Pago
        </button>
      </form>
    </div>
  
    <!-- Resumen del Pedido -->
    <div class="w-full lg:w-1/2 bg-white p-6 shadow-lg rounded-lg">
      <h2 class="text-xl font-bold text-gray-800 mb-4">Resumen del Pedido</h2>
      <div id="cart-summary" class="space-y-4"></div>
      <div class="mt-6 border-t pt-4">
        <p class="flex justify-between text-gray-800 font-medium">
          Subtotal: <span id="subtotal">$0.00</span>
        </p>
        <p class="flex justify-between text-gray-800 font-medium">
          IVA (13%): <span id="iva">$0.00</span>
        </p>
        <p class="flex justify-between text-xl text-indigo-600 font-bold">
          Total: <span id="total">$0.00</span>
        </p>
      </div>
    </div>
  </main>
  
    


    <script>
      const token = document.cookie
        .split("; ")
        .find((row) => row.startsWith("token"))
        .split("=")[1];
      const cardInfo = document.getElementById("card-info");
      const cashInfo = document.getElementById("cash-info");
      document
        .getElementById("payment-method")
        .addEventListener("change", function () {
          if (this.value === "card") {
            cardInfo.classList.remove("hidden");
            cashInfo.classList.add("hidden");
          } else {
            cardInfo.classList.add("hidden");
            cashInfo.classList.remove("hidden");
          }
        });

      document.addEventListener("DOMContentLoaded", () => {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        const cartSummary = document.getElementById("cart-summary");
        const subtotalElement = document.getElementById("subtotal");
        const ivaElement = document.getElementById("iva");
        const totalElement = document.getElementById("total");

        let subtotal = 0;

        cart.forEach((item) => {
          const productDiv = document.createElement("div");
          productDiv.className = "flex items-center border-b pb-4 mb-4";
          productDiv.innerHTML = `
          <img src="${item.img}" alt="${item.name}" class="w-20 h-20 object-cover rounded-lg">
          <div class="ml-4">
            <p class="text-gray-800 font-medium">${item.name}</p>
            <p class="text-gray-600">$${item.price.toFixed(2)} x ${item.quantity}</p>
          </div>
        `;
          cartSummary.appendChild(productDiv);
          subtotal += item.price * item.quantity;
        });

        const iva = subtotal * 0.13;
        const total = subtotal + iva;

        subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
        ivaElement.textContent = `$${iva.toFixed(2)}`;
        totalElement.textContent = `$${total.toFixed(2)}`;
      });

      document
        .getElementById("card-number")
        .addEventListener("input", function (e) {
          let value = e.target.value.replace(/\D/g, "");
          value = value.match(/.{1,4}/g)?.join(" ") || value;
          e.target.value = value;
        });

      document
        .getElementById("payment-form")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const formData = new FormData(e.target);
          const method = formData.get("payment-method");

          if (method === "card" && cardInfo.classList.contains("hidden")) {
            window.showAlert(
              "El método de pago con tarjeta no está activo.",
              "error",
            );
            return;
          }

          if (method === "cash" && cashInfo.classList.contains("hidden")) {
            window.showAlert(
              "El método de pago en efectivo no está activo.",
              "error",
            );
            return;
          }

          if (method === "card") {
            const cardholder = document.getElementById("cardholder");
            const cardNumber = document.getElementById("card-number");
            const expiry = document.getElementById("expiry");
            const cvv = document.getElementById("cvv");

            if (
              !cardholder.value ||
              !cardNumber.value ||
              !expiry.value ||
              !cvv.value
            ) {
              window.showAlert(
                "Por favor, completa la información de la tarjeta.",
                "error",
              );
              return;
            }
          }

          const clientData = {
            nombre: formData.get("nombre"),
            tipo_cliente: formData.get("tipo_cliente"),
            direccion: formData.get("direccion"),
            telefono: formData.get("telefono"),
            dui: formData.get("dui"),
            nit: formData.get("nit"),
            nrc: formData.get("nrc"),
            giro: formData.get("giro"),
            Idusuario: formData.get("idusuario"),
          };

          const data = {
            ...Object.fromEntries(formData),
            subtotal: document.getElementById("subtotal").textContent,
            iva: document.getElementById("iva").textContent,
            total: document.getElementById("total").textContent,
          };
          let id;
          console.log(formData.get("idcliente"));
          // if (formData.get("idcliente") == 0) {
          //   const newClient = await createClient(clientData, token);
          //   if (newClient.error) {
          //     window.showAlert(newClient.message, "error");
          //     return;
          //   }
          //   //fetch byuser
          //   fetch(
          //     `http://localhost:8000/clientes/byuser/${formData.get("idusuario")}`,
          //     {
          //       method: "GET",
          //       headers: {
          //         Accept: "application/json",
          //         Authorization: `Bearer ${token}`,
          //         "Content-Type": "application/json",
          //       },
          //     },
          //   )
          //     .then((response) => response.json())
          //     .then((data) => {
          //       id = data[0].idcliente;
          //     });
          // } else {
          //   id = formData.get("idcliente");
          //   updateClient(clientData, token, id);
          // }
          window.showAlert("Venta realizada con éxito", "success");
          console.log(id);
        });

      //crear cliente
      async function createClient(data, token) {
        const response = await fetch("http://localhost:8000/clientes/agregar", {
          method: "POST",
          headers: {
            Accept: "application/json",
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            nombre: data.nombre,
            tipo_cliente: data.tipo_cliente,
            direccion: data.direccion,
            telefono: data.telefono,
            dui: data.dui,
            nit: data.nit,
            nrc: data.nrc,
            giro: data.giro,
            Idusuario: data.Idusuario,
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
      }

      function updateClient(data, token, id) {
        fetch(`http://localhost:8000/clientes/actualizar/${id}`, {
          method: "PUT",
          headers: {
            Accept: "application/json",
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            nombre: data.nombre,
            tipo_cliente: data.tipo_cliente,
            direccion: data.direccion,
            telefono: data.telefono,
            dui: data.dui,
            nit: data.nit,
            nrc: data.nrc,
            giro: data.giro,
            Idusuario: data.Idusuario,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            return data;
          })
          .catch((error) => {
            console.error("Error:", error);
            window.showAlert("Ocurrió un error", "error");
          });
      }

      function createVenta(data, token) {
        fetch("http://localhost:8000/ventas/agregar", {
          method: "POST",
          headers: {
            Accept: "application/json",
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            Idcab_venta: 0,
            Iddocumento_fiscal: 0,
            correlativo_documento_fiscal: "string",
            fecha_venta: "2024-11-18",
            Idcliente: 0,
            condicion_venta: "string",
            Idmetodo_pago: 0,
            estado: "string",
            sumas: 0,
            iva: 0,
            total: 0,
            Idusuario_vendedor: 0,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("Success:", data);
  //           curl -X 'GET' \
  // 'http://localhost:8000/ventas/byclient/2' \
  // -H 'accept: application/json' \
  // -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJKdWFuIiwiZXhwIjoxNzMyMDc1MzE5fQ.uIFC6s-_FJn6sfLDbhlbQF6g2tmP2LJV7eASGMWkTBg'

            fetch(`http://localhost:8000/ventas/byclient/${data.Idcliente}`, {
              method: "GET",
              headers: {
                Accept: "application/json",
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
            })
              .then((response) => response.json())
              .then((data) => {
               return data.Idcab_venta;
              });
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      //crear detalles de venta

      //crear
    </script>
  </main>
</Layout>
