---
export const prerender = false;
const data = Astro.locals;
import { verify, userinfo } from "@Lib/auth";
import Layout from "@Layouts/layout.astro";
import Sidebar from "@components/Sidebar.astro";
import Card from "@components/menu/Card.astro";
//Aqui la lib empleados
import { ventastop, obtenerempleados } from "@Lib/users";
import Tabla from "@components/empleados/Tabla.astro";
import Modal from "@components/dialog.astro";
import Alertas from "@components/alertas.astro";

console.log(import.meta.env.APIKEY);

if ((await verify(data.token?.value)) == false) {
  return new Response(null, {
    status: 302,
    headers: {
      Location: "/",
    },
  });
}

const token = data.token?.value;

let res;
try {
  res = await userinfo(token);
} catch (error) {
  console.error("Error al obtener la informaci√≥n del usuario:", error);
  return new Response(null, {
    status: 500,
    statusText: "Internal Server Error",
  });
}

const user = res;
let empleados = [];
try {
  const response = await ventastop(token);
  empleados = response; // Remove second json() call since ventastop already returns parsed data
} catch (error) {
  console.error("Error fetching empleados:", error);
  // Handle error appropriately - could throw or return empty array/error state
  throw error;
}
let listaEmpleados = [];
try {
  listaEmpleados = await obtenerempleados(token);
} catch (error) {
  console.error("Error al obtener la lista de empleados:", error);
  return new Response(null, {
    status: 500,
    statusText: "Internal Server Error",
  });
}
---

<style>
  @import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css");
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background-color: #6c757d;
    border-radius: 4px;
    border: 2px solid transparent;
    background-clip: padding-box;
  }

  ::-webkit-scrollbar-thumb:hover {
    background-color: #495057;
  }

  .scrollbar-custom {
    scrollbar-width: thin;
    scrollbar-color: #6c757d transparent;
  }

  .container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  .container {
    display: block;
    position: relative;
    cursor: pointer;
    font-size: 1.5rem;
    user-select: none;
  }

  .checkmark {
    --clr: #0b6e4f;
    position: relative;
    top: 0;
    left: 0;
    height: 1.3em;
    width: 1.3em;
    background-color: #ccc;
    border-radius: 50%;
    transition: 300ms;
  }

  .container input:checked ~ .checkmark {
    background-color: var(--clr);
    border-radius: 0.5rem;
    animation: pulse 500ms ease-in-out;
  }

  .checkmark:after {
    content: "";
    position: absolute;
    display: none;
  }

  .container input:checked ~ .checkmark:after {
    display: block;
  }

  .container .checkmark:after {
    left: 0.45em;
    top: 0.25em;
    width: 0.25em;
    height: 0.5em;
    border: solid #e0e0e2;
    border-width: 0 0.15em 0.15em 0;
    transform: rotate(45deg);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 #0b6e4f90;
      rotate: 20deg;
    }

    50% {
      rotate: -20deg;
    }

    75% {
      box-shadow: 0 0 0 10px #0b6e4f60;
    }

    100% {
      box-shadow: 0 0 0 13px #0b6e4f30;
      rotate: 0;
    }
  }
</style>
<Layout title="Panel de Control">
  <Alertas />
  <!-- height: max-content; -->
  <div
    class="flex flex-col md:flex-row bg-gray-100 dark:bg-gray-800 dark:text-white h-full"
  >
    <!-- Sidebar -->
    <br /><br />
    <Sidebar tipo={user.tipo_perfil}>
      <div class="flex-1 p-4 md:p-6 dark:bg-gray-800">
        <h1 class="text-3xl font-bold mb-6">
          <i class="fa-solid fa-user-tie"></i> Listado de Empleados
        </h1>

        <div class="flex items-center justify-end mb-6">
          <div class="flex items-center space-x-2">
            <div
              class="w-12 h-12 rounded-full overflow-hidden border-2 border-gray-300 dark:border-gray-500"
            >
              <img
                src={user.imagen ||
                  "https://avatars.githubusercontent.com/u/178928214?v=4"}
                alt="Foto de perfil"
                class="w-full h-full object-cover"
              />
            </div>
            <div class="text-right">
              <h1 class="text-xl font-bold">Hola, {user.nombre}</h1>
              <p class="text-gray-600 dark:text-gray-400 text-sm">
                {
                  user.tipo_perfil == 1
                    ? "Administrador"
                    : user.tipo_perfil == 2
                      ? "Vendedor"
                      : "Usuario"
                }
              </p>
            </div>
          </div>
        </div>
        <!-- Contenido de tarjetas -->
        <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
          <Alertas />
          <Card title="Herramientas" description="Manejo de datos de empleado">
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
              <div class="flex justify-center">
                <a
                  id="add"
                  class="w-14 h-14 sm:w-16 sm:h-16 lg:w-20 lg:h-20 dark:bg-indigo-500 bg-sky-500 rounded-xl flex flex-col justify-center items-center text-gray-200 hover:scale-105 transition-transform duration-300 cursor-pointer"
                  onclick="document.getElementById('Addmodal').showModal()"
                >
                  <i class="fa-solid fa-plus text-xl md:text-3xl"></i>
                  <span class="text-xs md:text-sm font-bold">Agregar</span>
                </a>
              </div>
              <div class="flex justify-center">
                <div
                  id="editButton"
                  class="w-14 h-14 sm:w-16 sm:h-16 lg:w-20 lg:h-20 dark:bg-emerald-500 bg-lime-500 rounded-xl flex flex-col justify-center items-center text-gray-200 hover:scale-105 transition-transform duration-300 cursor-pointer"
                  onclick="document.getElementById('Editmodal').showModal()"
                >
                  <i class="fa-solid fa-pen text-xl md:text-3xl"></i>
                  <span class="text-xs md:text-sm font-bold">Editar</span>
                </div>
              </div>
              <div class="flex justify-center">
                <div
                  class="w-14 h-14 sm:w-16 sm:h-16 lg:w-20 lg:h-20 dark:bg-rose-500 bg-pink-600 rounded-xl flex flex-col justify-center items-center text-gray-200 hover:scale-105 transition-transform duration-300 cursor-pointer"
                  id="eliminar"
                >
                  <i class="fa-solid fa-trash text-xl md:text-3xl"></i>
                  <span class="text-xs md:text-sm font-bold">Eliminar</span>
                </div>
              </div>
              <div class="flex justify-center">
                <div
                  class="w-14 h-14 sm:w-16 sm:h-16 lg:w-20 lg:h-20 dark:bg-amber-500 bg-orange-500 rounded-xl flex flex-col justify-center items-center text-gray-200 hover:scale-105 transition-transform duration-300 cursor-pointer"
                  id="detallesbtn"
                >
                  <i class="fa-solid fa-chart-pie text-xl md:text-3xl"></i>
                  <span class="text-xs md:text-sm font-bold">Detalles</span>
                </div>
              </div>
            </div>
          </Card>

          <Card title="Total de Empleados" description="Total"
            ><i class="fa-solid fa-id-card-clip"></i>
            {" " + listaEmpleados.length}</Card
          >
          <Card title="Empleado del Mes" description="El ultimo Mes">
            {
              empleados && empleados.length > 0 ? (
                <>
                  <i class="fa-solid fa-trophy" />
                  {" " + empleados[0].vendedor}
                  <br />
                  <i class="fa-solid fa-file-invoice-dollar" />
                  {" " + empleados[0].total_ventas} ventas en total
                </>
              ) : (
                <p>No hay empleados registrados este mes</p>
              )
            }
          </Card>
        </div>
        <div
          class="mt-6 bg-white p-6 rounded-lg shadow-md overflow-x-auto dark:bg-gray-700"
        >
          <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold">Empleados</h2>
            <button
              class="btn text-indigo-900 dark:text-slate-200 px-2 py-1 rounded-md hover:text-gray-500 dark:hover:text-gray-50"
              id="acciones"
            >
              <i class="fa-solid fa-clipboard-check" id="Activar"></i> Seleccionar
            </button>
          </div>
          <Tabla>
            {
              listaEmpleados.map((empleado) => (
                <tr class="break-words hover:bg-gray-100 dark:hover:bg-gray-800">
                  <td class="px-2 py-1 max-w-full overflow-hidden text-ellipsis align-middle text-center hidden acciones">
                    <label class="container relative block cursor-pointer text-lg select-none">
                      <input
                        type="checkbox"
                        name="empleado"
                        value={empleado.Idusuario}
                        class="absolute opacity-0 cursor-pointer h-0 w-0"
                      />
                      <div class="checkmark relative top-0 left-0 h-5 w-5 bg-gray-300 rounded-full transition duration-300 mx-auto" />
                    </label>
                  </td>
                  <td class="px-2 py-1 max-w-full overflow-hidden text-ellipsis text-center">
                    {empleado.nombre}
                  </td>
                  <td class="px-2 py-1 max-w-full overflow-hidden text-ellipsis text-center">
                    {empleado.usuario}
                  </td>
                  <td class="px-2 py-1 max-w-full overflow-hidden text-ellipsis text-center">
                    {empleado.tipo_perfil == 1
                      ? "Administrador"
                      : empleado.tipo_perfil == 2
                        ? "Vendedor"
                        : "Usuario"}
                  </td>

                  <td class="px-2 py-1 max-w-full overflow-hidden text-ellipsis text-center">
                    <span
                      class={`px-2 py-1 rounded-full text-xs font-semibold
            ${
              empleado.activo == 1
                ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
            }`}
                    >
                      {empleado.activo == 1 ? "Activo" : "Inactivo"}
                    </span>
                  </td>
                  <td class="px-2 py-1 max-w-full overflow-hidden text-ellipsis text-center">
                    <img
                      src={empleado.imagen || "/user.png"}
                      alt="Foto de perfil"
                      class="w-8 h-8 rounded-full mx-auto"
                    />
                  </td>
                </tr>
              ))
            }
          </Tabla>

          <!-- Actualizaciones recientes -->
          <div
            class="mt-6 bg-white p-6 rounded-lg shadow-md dark:bg-gray-700 dark:text-white"
          >
            <h2 class="text-xl font-semibold dark:text-white">
              Empleados con mas ventas
            </h2>
            <ul class="mt-4 space-y-4">
              {
                empleados.map((empleado, index) => (
                  <li class="flex items-center justify-between p-4 bg-gray-100 rounded-lg dark:bg-gray-800">
                    <div class="flex items-center space-x-4">
                      <i
                        class={`fas ${
                          index === 0
                            ? "fa-crown text-yellow-500"
                            : index === 1
                              ? "fa-medal text-gray-400"
                              : "fa-award text-orange-400"
                        } text-2xl`}
                      />
                      <div>
                        <p class="text-lg font-medium">{empleado.vendedor}</p>
                        <p class="text-sm text-gray-500 dark:text-gray-300">
                          {empleado.total_ventas} ventas
                        </p>
                      </div>
                    </div>
                    <span
                      class={`font-semibold ${
                        index === 0
                          ? "text-indigo-950 dark:text-slate-200"
                          : index === 1
                            ? "text-slate-500 dark:text-indigo-200"
                            : "text-amber-600 dark:text-amber-400"
                      }`}
                    >
                      {empleado.posicion}¬∞ Lugar
                    </span>
                  </li>
                ))
              }
            </ul>
          </div>
          <Modal id="Addmodal">
            <div
              class="bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-lg w-full p-6 animate-slideDown"
            >
              <h2
                class="text-2xl font-bold mb-4 text-gray-900 dark:text-gray-100"
              >
                Agregar Empleado
              </h2>

              <!-- Formulario -->
              <form name="agregar" method="POST" class="space-b-4">
                <label
                  for="nombre"
                  class="text-x1 text-gray-700 dark:text-gray-300">Nombre</label
                >
                <input
                  type="text"
                  id="nombre"
                  name="Nombre"
                  placeholder="Nombre"
                  required
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                />

                <label
                  for="Usuario"
                  class="text-sm text-gray-700 dark:text-gray-300 mt-2"
                  >Usuario</label
                >
                <input
                  id="Usuario"
                  name="Usuario"
                  type="text"
                  required
                  placeholder="Nombre de Usuario"
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                />
                <!-- password -->
                <label
                  for="password"
                  class="text-sm text-gray-700 dark:text-gray-300 mt-2"
                  >Contrase√±a</label
                >
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  placeholder="Contrase√±a"
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                />

                <label
                  for="empleadoImagen"
                  class="text-sm text-gray-700 dark:text-gray-300 mt-2"
                  >Imagen</label
                >
                <div class="mt-4">
                  <!-- image uploadfile formatspng jpg -->
                  <input
                    type="file"
                    id="empimg"
                    name="empleadoImagen"
                    accept="image/png, image/jpeg"
                    class="form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                  />
                  <img
                    id="empleadoImagen"
                    src={"/user.png"}
                    alt="Imagen del Empleado"
                    class="w-16 h-16 rounded-md border border-gray-300 dark:border-gray-600"
                  />
                </div>

                <!-- JavaScript para actualizar la imagen y el valor del campo oculto -->
                <script>
                  const input = document.getElementById("empimg");
                  const img = document.getElementById("empleadoImagen");

                  input.addEventListener("change", (e) => {
                    const file = e.target.files[0];
                    const reader = new FileReader();

                    reader.onload = () => {
                      img.src = reader.result;
                      document.getElementById("imagenUrl").value =
                        reader.result;
                    };

                    reader.readAsDataURL(file);
                  });
                </script>
                <!-- Botones -->
                <div class="flex justify-end space-x-4">
                  <button
                    type="button"
                    class="btn btn-cancel bg-gray-500 text-white px-4 py-2 rounded-md"
                    onclick="document.getElementById('Addmodal').close()"
                  >
                    Cancelar
                  </button>
                  <button
                    type="button"
                    id="addel"
                    class="btn btn-submit bg-blue-500 text-white px-4 py-2 rounded-md"
                  >
                    Enviar
                  </button>
                </div>
              </form>
            </div>
          </Modal>
          <Modal id="editar">
            <div
              class="bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-lg w-full p-6 animate-slideDown"
            >
              <h2
                class="text-2xl font-bold mb-4 text-gray-900 dark:text-gray-100"
              >
                Editar Empleado
              </h2>

              <!-- Formulario -->
              <form name="editarEmpleado" method="POST" class="space-b-4">

                
                <label for="nombreEdit" class="text-x1 text-gray-700 dark:text-gray-300">
                  Nombre
                </label>
                <input
                  type="text"
                  id="nombreEdit" 
                  name="nombre"
                  placeholder="Nombre"
                  required
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                />

                <label for="usuarioEdit" class="text-sm text-gray-700 dark:text-gray-300 mt-2">
                  Usuario
                </label>
                <input
                  id="usuarioEdit"
                  name="usuario" 
                  type="text"
                  required
                  placeholder="Nombre de Usuario"
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                />

                <label for="passwordEdit" class="text-sm text-gray-700 dark:text-gray-300 mt-2">
                  Contrase√±a
                </label>
                <input
                  id="passwordEdit"
                  name="password"
                  type="password"
                  placeholder="Contrase√±a"
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                />

                <label for="tipoPerfilEdit" class="text-sm text-gray-700 dark:text-gray-300 mt-2">
                  Tipo de Perfil
                </label>
                <select
                  id="tipoPerfilEdit"
                  name="tipoPerfil"
                  required
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                >
                  <option value="1">Administrador</option>
                  <option value="2">Vendedor</option>
                  <option value="3">Usuario</option>
                </select>

                <label for="activoEdit" class="text-sm text-gray-700 dark:text-gray-300 mt-2">
                  Estado
                </label>
                <select
                  id="activoEdit"
                  name="activo"
                  required
                  class="mb-5 form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                >
                  <option value="1">Activo</option>
                  <option value="0">Inactivo</option>
                </select>

                <label for="empleadoImagenEdit" class="text-sm text-gray-700 dark:text-gray-300 mt-2">
                  Imagen
                </label>
                <div class="mt-4">
                  <input
                    type="file"
                    id="empimgEdit"
                    name="empleadoImagen"
                    accept="image/png, image/jpeg"
                    class="form-field w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
                  />
                  <img
                    id="empleadoImagenEdit"
                    src="/user.png"
                    alt="Imagen del Empleado"
                    class="w-16 h-16 rounded-md border border-gray-300 dark:border-gray-600"
                  />
                </div>

                <!-- Botones -->
                <div class="flex justify-end space-x-4">
                  <button
                    type="button"
                    class="btn btn-cancel bg-gray-500 text-white px-4 py-2 rounded-md"
                    onclick="document.getElementById('Editmodal').close()"
                  >
                    Cancelar
                  </button>
                  <button
                    type="button"
                    id="editarEmpleadoBtn"
                    class="btn btn-submit bg-blue-500 text-white px-4 py-2 rounded-md"
                  >
                    Actualizar
                  </button>
                </div>
              </form>
            </div>
          </Modal>
        </div>
      </div>
    </Sidebar>
  </div>
</Layout>
<script type="module">
  const empleados = document.getElementsByName("empleado");
  const actions = document.getElementById("acciones");
  const token = document.cookie
    .split("; ")
    .find((row) => row.startsWith("token"))
    .split("=")[1];
  actions.addEventListener("click", () => {
    const acciones = document.getElementsByClassName("acciones");

    for (let i = 0; i < acciones.length; i++) {
      acciones[i].classList.toggle("hidden");
    }
  });

  const empsendbtn = document.getElementById("addel");
  empsendbtn.addEventListener("click", async () => {
    const nombre = document.getElementById("nombre").value;
    const usuario = document.getElementById("Usuario").value;
    const password = document.getElementById("password").value;
    const img = document.getElementById("empimg").files[0];
    let baseimg = "/user.png";
    //convert to base64
    if (img) {
      try {
        // Convert to async/await for better readability
        const result = await read(img);
        if (result) {
          baseimg = result;
        } else {
          console.error("Failed to read image data");
        }
      } catch (error) {
        console.error("Error reading image:", error);
        // Handle error case appropriately
        // Or set default fallback
      }
    }

    const data = {
      nombre,
      usuario,
      password,
      imagen: baseimg,
    };
    const response = await fetch("http://localhost:8000/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      window.showAlert("Empleado agregado correctamente", "success");
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      window.showAlert("Error al agregar el empleado", "error");
    }
  });

  function read(img) {
    const reader = new FileReader();

    reader.readAsDataURL(img);
    reader.onload = async function () {
      return reader.result;
    };
    reader.onerror = function (error) {
      return "";
    };
  }

  const eliminar = document.getElementById("eliminar");
  eliminar.addEventListener("click", async () => {
    let seleccionado = false;

    for (let i = 0; i < empleados.length; i++) {
      if (empleados[i].checked) {
        seleccionado = true;
        const empleadoNombre =
          empleados[i].parentElement.parentElement.parentElement.children[1]
            .textContent;
        //<h1 class="text-xl font-bold">Hola, {user.nombre}</h1> ten en cuenta que pueden haber mas de un h1
        if (
          empleadoNombre ==
          document.querySelectorAll("h1")[3].textContent.split(", ")[1]
        ) {
          window.showAlert("No puedes eliminar tu propio usuario", "error");
          return;
        }
        const confirmacion = await new Promise((resolve) => {
          window.showAlert(
            `¬øEst√°s seguro que deseas eliminar al empleado \ncon nombre: ${empleadoNombre}?`,
            "confirm",
            {
              onCancel: () => {
                console.log("Operaci√≥n cancelada");
                resolve(false);
              },
              onAccept: () => {
                //si el usuario es el mismo que el que esta logeado no se puede eliminar
                resolve(true);
              },
            },
          );
        });

        if (confirmacion) {
          await delempleado(empleados[i].value, i === empleados.length - 1);
        }
      }
    }
    if (!seleccionado) {
      window.showAlert("No hay Empleado seleccionado", "error");
    }
  });

  function delempleado(id, ultimo) {
    fetch("http://localhost:8000/usuarios/eliminar/" + id, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    }).then((res) => {
      if (res.ok) {
        //custom alert
        window.showAlert("Empleado eliminado correctamente", "success");
        if (ultimo) {
          setTimeout(() => {
            window.location.reload();
          }, 500);
        }
      } else {
        window.showAlert("Error al eliminar el empleado", "error");
      }
    });
  }

  // Add this to your existing script section:

const editarEmpleado = document.getElementById("editButton");
editarEmpleado.addEventListener("click", () => {
  let empleadoSeleccionado;
  const formEditar = document.getElementsByName("editarEmpleado")[0];

  // Find selected employee
  const empleados = document.getElementsByName("empleado");
  for (let i = 0; i < empleados.length; i++) {
    if (empleados[i].checked) {
      empleadoSeleccionado = empleados[i].value;
      break;
    }
  }

  if (!empleadoSeleccionado) {
    window.showAlert("No hay empleado seleccionado", "error");
    return;
  }

  document.getElementById("Editmodal").showModal();

  // Fetch employee details
  fetch(`http://localhost:8000/usuarios/detalles/${empleadoSeleccionado}`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
  })
    .then((res) => res.json())
    .then((data) => {
      formEditar.nombre.value = data.nombre;
      formEditar.usuario.value = data.usuario;
      formEditar.tipoPerfil.value = data.tipo_perfil;
      formEditar.activo.value = data.activo;
      
      // Update image preview if exists
      if (data.imagen) {
        document.getElementById("empleadoImagenEdit").src = data.imagen;
      }
    });

  // Handle image upload preview
  const inputImg = document.getElementById("empimgEdit");
  const imgPreview = document.getElementById("empleadoImagenEdit");

  inputImg.addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        imgPreview.src = reader.result;
        document.getElementById("imagenUrlEdit").value = reader.result;
      };
      reader.readAsDataURL(file);
    }
  });

  // Handle form submission
  document.getElementById("editarEmpleadoBtn").addEventListener("click", () => {
    if (!formEditar.nombre.value || !formEditar.usuario.value) {
      window.showAlert("Nombre y usuario son requeridos", "error");
      return;
    }
    updateEmpleado(empleadoSeleccionado);
  });
});

function updateEmpleado(id) {
  const formEditar = document.getElementsByName("editarEmpleado")[0];
  const data = {
    nombre: formEditar.nombre.value,
    usuario: formEditar.usuario.value,
    tipo_perfil: formEditar.tipoPerfil.value,
    activo: formEditar.activo.value,
    imagen: document.getElementById("imagenUrlEdit").value || document.getElementById("empleadoImagenEdit").src
  };

  // Add password only if provided
  if (formEditar.password.value) {
    data.password = formEditar.password.value;
  }

  fetch(`http://localhost:8000/usuarios/actualizar/${id}`, {
    method: "PUT", 
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data)
  })
  .then((res) => {
    if (res.ok) {
      document.getElementById("Editmodal").close();
      window.showAlert("Empleado actualizado correctamente", "success");
      setTimeout(() => {
        window.location.reload();
      }, 500);
    } else {
      window.showAlert("Error al actualizar el empleado", "error");
    }
  });
}
</script>
