---
export const prerender = false;
const data = Astro.locals;
import { verify, userinfo } from "@Lib/auth";
import Layout from "@Layouts/layout.astro";
import Sidebar from "@components/Sidebar.astro";
import Card from "@components/menu/Card.astro";
import { Fetcher } from "@Lib/fetcher";
import Modal from "@components/dialog.astro";
import FormField from "@components/form/FormField.astro";
import FormSelect from "@components/form/FormSelect.astro";
import FormTextarea from "@components/form/FormTextarea.astro";
import Userdiv from "@components/User.astro";

// Auth check
if (!(await verify(data.token?.value))) {
  return new Response(null, { status: 302, headers: { Location: "/" } });
}

const token = data.token?.value;
const user = await userinfo(token);

// Helper function for fetching data
async function fetchData(endpoint) {
  try {
    const res = await Fetcher(endpoint, "listar", token);
    if (res.status !== 200) throw new Error(`Error fetching ${endpoint}`);
    return res.data;
  } catch (error) {
    console.error(`Error fetching ${endpoint}:`, error);
    return [];
  }
}

// Fetch all required data
const [ventas, usuarios, clientes, documentosFiscales, metodosPago] =
  await Promise.all([
    fetchData("ventas"),
    fetchData("usuarios"),
    fetchData("clientes"),
    fetchData("documentos"),
    fetchData("metodos"),
  ]);

// Generic lookup function
function getLookupValue(collection, id, idField, nameField = "nombre") {
  const item = collection.find((item) => item[idField] === id);
  return item ? item[nameField] : "Desconocido";
}

// Simplified lookup functions
const obtenerNombreUsuario = (id) => getLookupValue(usuarios, id, "Idusuario");
const obtenerNombreCliente = (id) => getLookupValue(clientes, id, "Idcliente");
const obtenerNombreDocumentoFiscal = (id) =>
  getLookupValue(documentosFiscales, id, "Iddocumento_fiscal");
const obtenerNombreMetodoPago = (id) =>
  getLookupValue(metodosPago, id, "Idmetodo_pago");

// Filter recent sales (last 30 days)
const ventasRecientes = ventas.filter(
  (venta) =>
    !isNaN(new Date(venta.fecha_venta).getTime()) &&
    (new Date().getTime() - new Date(venta.fecha_venta).getTime()) /
      (1000 * 60 * 60 * 24) <=
      30,
);
---

<style>
  @import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css");
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background-color: #6c757d;
    border-radius: 4px;
    border: 2px solid transparent;
    background-clip: padding-box;
  }

  ::-webkit-scrollbar-thumb:hover {
    background-color: #495057;
  }

  .scrollbar-custom {
    scrollbar-width: thin;
    scrollbar-color: #6c757d transparent;
  }
</style>
<Layout title="Panel de Control">
  <!-- height: max-content; -->
  <div
    class="flex flex-col md:flex-row bg-gray-100 dark:bg-gray-800 dark:text-white h-full"
  >
    <!-- Sidebar -->
    <br /><br />
    <Sidebar tipo={user.tipo_perfil}>
      <div class="flex-1 p-4 md:p-6 dark:bg-gray-800">
        <h1 class="text-3xl font-bold mb-6">
          <i class="fa-solid fa-cash-register"></i> Listado de Ventas
        </h1>

        <Userdiv Userinfo={user} />
        <!-- Contenido de tarjetas -->
        <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
          <Card title="Herramientas" description="Manejo de datos de ventas">
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 gap-2">
              <div class="flex justify-center">
                <a
                  id="add"
                  class="w-14 h-14 sm:w-16 sm:h-16 lg:w-20 lg:h-20 dark:bg-indigo-500 bg-sky-500 rounded-xl flex flex-col justify-center items-center text-gray-200 hover:scale-105 transition-transform duration-300 cursor-pointer"
                  onclick="document.getElementById('Addmodal').showModal()"
                >
                  <i class="fa-solid fa-plus text-xl md:text-3xl"></i>
                  <span class="text-xs md:text-sm font-bold">Nueva</span>
                </a>
              </div>
            </div>
          </Card>

          <Card title="Total de Ventas" description="Total"
            ><i class="fa-solid fa-money-check-dollar"></i>
            {" " + ventas.length || 0}</Card
          >
          <Card title="Ventas Recientes" description="El ultimo Mes"
            ><i class="fa-solid fa-receipt"></i>
            {
              ventasRecientes.length > 0
                ? " " + ventasRecientes.length
                : "No hay ventas recientes"
            }
          </Card>
        </div>

        <div
          class="mt-6 bg-white p-6 rounded-lg shadow-md overflow-x-auto dark:bg-gray-700"
        >
          <h2 class="text-xl font-semibold">Ventas</h2><br />
          <!-- Contenedor principal para las tarjetas -->
          <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4"
          >
            {
              ventas.map((venta) => (
                <div class="max-w-xs rounded-lg shadow-lg bg-white dark:bg-gray-900 overflow-hidden">
                  <div class="p-4 bg-gray-800 dark:bg-gray-200 text-center">
                    <h2 class="text-xl font-semibold text-white dark:text-slate-900">
                      Venta No: {venta.Idcab_venta}
                    </h2>
                  </div>
                  <div class="p-4 text-gray-800 dark:text-gray-300">
                    <p>
                      <strong>Número: </strong> {venta.Idcab_venta}
                    </p>
                    <p>
                      <strong>Documento Fiscal: </strong>{" "}
                      {obtenerNombreDocumentoFiscal(venta.Iddocumento_fiscal)}
                    </p>
                    <p>
                      <strong>Correlativo: </strong>{" "}
                      {venta.correlativo_documento_fiscal}
                    </p>
                    <p>
                      <strong>Fecha de Venta: </strong>{" "}
                      {new Date(venta.fecha_venta).toLocaleDateString()}
                    </p>
                    <p>
                      <strong>Cliente: </strong>{" "}
                      {obtenerNombreCliente(venta.Idcliente)}
                    </p>
                    <p>
                      <strong>Condición de Venta: </strong>{" "}
                      {venta.condicion_venta}
                    </p>
                    <p>
                      <strong>Método de Pago: </strong>{" "}
                      {obtenerNombreMetodoPago(venta.Idmetodo_pago)}
                    </p>
                    <p>
                      <strong>Estado: </strong> {venta.estado}
                    </p>
                    <p>
                      <strong>Sumas: </strong>$
                      {venta.sumas?.toFixed(2) ?? "0.00"}
                    </p>
                    <p>
                      <strong>IVA: </strong>${venta.iva?.toFixed(2) ?? "0.00"}{" "}
                      (13%)
                    </p>
                    <p>
                      <strong>Total: </strong>$
                      {venta.total?.toFixed(2) ?? "0.00"}
                    </p>
                    <p>
                      <strong>Vendedor: </strong>{" "}
                      {obtenerNombreUsuario(venta.Idusuario_vendedor)}
                    </p>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </Sidebar>

    <script type="module">
      document.addEventListener("astro:page-load", actualizarEstados);

      function actualizarEstados() {
        const estados = document.querySelectorAll("p");

        estados.forEach(function (estado) {
          if (estado.innerHTML.includes("Estado:")) {
            const estadoTexto = estado.textContent.trim().split(":")[1].trim();

            if (estadoTexto.toLowerCase() === "finalizado") {
              estado.classList.add("text-green-500");
              estado.classList.remove("text-red-200");
            } else if (estadoTexto.toLowerCase() === "pendiente") {
              estado.classList.add("text-red-300");
              estado.classList.remove("text-green-300");
            }
          }
        });
      }

      document.addEventListener("DOMContentLoaded", actualizarEstados);
    </script>
  </div>
</Layout>
